import { Scene, SceneEnter, SceneLeave, Command, Ctx, On } from 'nestjs-telegraf';
import { IInternalContext } from '../types';
import { TelegramKeyboardService } from '../utils';
import { Injectable } from '@nestjs/common';
import { RedisService } from '@/modules/redis/redis.service';
import { ETelegramScenes } from '../types/enu';
import { ParserService } from '@/modules/parser/parser.service';
import { ERedisKeys } from '@/common/types';
import { CronService } from '@/modules/cron/cron.service';
import { InternalLogger } from '@/common';

@Injectable()
@Scene('MAIN_SCENE')
export class MainScene {
    private logger = new InternalLogger(MainScene.name);

    constructor(
        private readonly keyboardService: TelegramKeyboardService,
        private readonly redisService: RedisService,
        private readonly parserService: ParserService,
        private readonly cronService: CronService
    ) { }

    @SceneEnter()
    async onEnterScene(@Ctx() ctx: IInternalContext) {
        const sessionStatus = await this.redisService.get(`auth_${ctx.from.id}`);

        if (sessionStatus !== 'authenticated') {
            await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
            await ctx.scene.leave();
            return;
        }

        const appStatus = await this.redisService.get(ERedisKeys.GLOBAL_APP_STATUS) || 'deactivated';
        const buttonLabel = appStatus === 'started' ? '–°—Ç–æ–ø ‚ùå' : '–°—Ç–∞—Ä—Ç üöÄ';

        await ctx.reply('–í—ã –≤ –º–µ–Ω—é:', this.getMainMenuKeyboard(buttonLabel));
    }

    private getMainMenuKeyboard(buttonLabel: string) {
        return this.keyboardService.createKeyboard([
            [buttonLabel, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚öôÔ∏è'],
            ['–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ—Ä–æ—à–µ–Ω–∫–æ üí•', '–ù–µ—Ç, –∑–∞ –∑–µ–ª–µ–Ω—Å–∫–æ–≥–æ ü§°'],
            ['–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–µ—à–Ω–∏–∫ üå∞'],
            ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä', '–í—ã–π—Ç–∏ üëã']
        ]);
    }

    private handlers = {
        'db': async (ctx: IInternalContext) => {
            const data = await this.parserService.getTokensData();
            console.log(data.tokensAdderss);
            await ctx.reply('Done');
        },
        '–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ—Ä–æ—à–µ–Ω–∫–æ üí•': async (ctx: IInternalContext) => {
            await ctx.reply('–ü–ª—é—Å—ã: –≤–∫—É—Å–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ \n\n–ú–∏–Ω—É—Å—ã:–Ω–µ –≤—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω—ã–π —à–æ–∫–æ–ª–∞–¥');
        },
        '–ù–µ—Ç, –∑–∞ –∑–µ–ª–µ–Ω—Å–∫–æ–≥–æ ü§°': async (ctx: IInternalContext) => {
            await ctx.reply('–ü–ª—é—Å—ã: —Å–º–µ—à–Ω–æ–π \n\n–ú–∏–Ω—É—Å—ã: –≤–æ–π–Ω–∞');
        },
        '–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–µ—à–Ω–∏–∫ üå∞': async (ctx: IInternalContext) => {
            await ctx.reply('–°–∞–º –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –ø—Ä–∏–∫–æ–ª, –∫–ª–æ—É–Ω');
        },
        '–í—ã–π—Ç–∏ üëã': async (ctx: IInternalContext) => {
            await this.redisService.del(`auth_${ctx.from.id}`);
            ctx.session = {};
            await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', { reply_markup: { remove_keyboard: true } });
            await ctx.scene.leave();
        },
        '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚öôÔ∏è': async (ctx: IInternalContext) => {
            await ctx.scene.enter(ETelegramScenes.CONFIG);
        },
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä': async (ctx: IInternalContext) => {
            await ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç—É –Ω–∏—á–µ');
        },
        '–°—Ç–∞—Ä—Ç üöÄ': async (ctx: IInternalContext) => this.toggleAppStatus(ctx, 'started'),
        '–°—Ç–æ–ø ‚ùå': async (ctx: IInternalContext) => this.toggleAppStatus(ctx, 'deactivated')
    };

    @On('text')
    async onTextButton(@Ctx() ctx: IInternalContext) {
        const handler = this.handlers[ctx.text];
        if (handler) {
            await handler(ctx);
        } else {
            await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }

    private async toggleAppStatus(ctx: IInternalContext, status: string) {
        const currentStatus = await this.redisService.get(ERedisKeys.GLOBAL_APP_STATUS) || 'deactivated';
        if (status === 'started' && currentStatus !== 'started') {
            await this.redisService.set(ERedisKeys.GLOBAL_APP_STATUS, 'started');
            this.logger.info('Restarting cron job...');
            await this.cronService.createCronJob()
            await ctx.reply('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!', { reply_markup: { remove_keyboard: true } });
        } else if (status === 'deactivated' && currentStatus === 'started') {
            await this.redisService.set(ERedisKeys.GLOBAL_APP_STATUS, 'deactivated');
            await this.cronService.stopCronJob()
            await ctx.reply('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', { reply_markup: { remove_keyboard: true } });
        }

        const updatedStatus = await this.redisService.get(ERedisKeys.GLOBAL_APP_STATUS);
        const buttonLabel = updatedStatus === 'started' ? '–°—Ç–æ–ø ‚ùå' : '–°—Ç–∞—Ä—Ç üöÄ';
        await ctx.reply('–í—ã –≤ –º–µ–Ω—é:', this.getMainMenuKeyboard(buttonLabel));
    }

    @Command('exit')
    async onExitCommand(@Ctx() ctx: IInternalContext) {
        await ctx.scene.leave();
        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ MAIN_SCENE —Å—Ü–µ–Ω—ã.');
    }

    @SceneLeave()
    async onLeaveScene(@Ctx() ctx: IInternalContext) {
        // –õ–æ–≥–∏–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
}
