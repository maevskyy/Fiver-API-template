import { Scene, SceneEnter, SceneLeave, Command, Ctx, On } from 'nestjs-telegraf';
import { IInternalContext } from '../types';
import { TelegramKeyboardService } from '../utils';
import { Inject, Injectable } from '@nestjs/common';
import { RedisService } from '@/modules/redis/redis.service';
import { ETelegramScenes } from '../types/enu';
import { CronService } from '@/modules/cron/cron.service';

@Injectable()
@Scene('CONFIG_SCENE')
export class ConfigScene {
    constructor(
        private readonly keyboardService: TelegramKeyboardService,
        private readonly redisService: RedisService,
        private readonly cronService: CronService
    ) { }

    private async getConfig() {
        const link = await this.redisService.get('config_global_link');
        const timer = await this.redisService.get('config_global_timer');

        const text = `–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: \n\n–°—Å—ã–ª–∫–∞: ${link ?? 'http://default.com'} \n\n–¢–∞–π–º–µ—Ä: ${timer ?? 'null'} –º–∏–Ω—É—Ç`;
        return {
            link,
            timer,
            text
        }
    }

    @SceneEnter()
    async onEnterScene(@Ctx() ctx: IInternalContext) {
        const sessionStatus = await this.redisService.get(`auth_${ctx.from.id}`);

        if (sessionStatus !== 'authenticated') {
            await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
            await ctx.scene.leave();
        } else {
            const config = await this.getConfig()
            await ctx.reply(config.text, this.keyboardService.createKeyboard([['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É üîó', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è∞'], ['–ù–∞–∑–∞–¥ ‚óÄÔ∏è']]));
        }
    }

    @On('text')
    async onTextInput(@Ctx() ctx: IInternalContext) {
        if (ctx.text === '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É üîó') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:');
            ctx.session.__scenes.waitingForLink = true;
        } else if (ctx.text === '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è∞') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –≤ –º–∏–Ω—É—Ç–∞—Ö:');
            ctx.session.__scenes.waitingForTimer = true;
        } else if (ctx.session.__scenes.waitingForLink) {
            await this.redisService.set('config_global_link', ctx.text);
            const config = await this.getConfig()
            await ctx.reply(config.text);
            ctx.session.__scenes.waitingForLink = false;
        } else if (ctx.session.__scenes.waitingForTimer) {
            const timer = parseInt(ctx.text);
            if (isNaN(timer) || timer <= 0) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.');
            } else {
                await this.redisService.set('config_global_timer', ctx.text);
                const config = await this.getConfig()
                await ctx.reply(config.text);
                ctx.session.__scenes.waitingForTimer = false;
            }
        } else if (ctx.text === '–ù–∞–∑–∞–¥ ‚óÄÔ∏è') {
            await ctx.scene.enter(ETelegramScenes.MAIN);
        }
        else {
            await ctx.reply('–®–æ?')
        }
    }

    @Command('exit')
    async onExitCommand(@Ctx() ctx: IInternalContext) {
        await ctx.scene.leave();
        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ CONFIG_SCENE —Å—Ü–µ–Ω—ã.');
    }

    @SceneLeave()
    async onLeaveScene(@Ctx() ctx: IInternalContext) {
    }
}
